<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <title>Messages</title>
    <!-- load static -->
    {% load static %}
    <!-- <link rel="stylesheet" href="{% static 'style.css' %}"> -->
    <!-- link to h=css file -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js" integrity="sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
</head>
<body>
    <div class="parent">
        <div class="child-2">
            <center><h2>Chats</h2></center><hr>
            <div class="chat-body-parent">
                <div class="chat-body" id="tasks">
                    <div class="message" id="chatContainer">
                      <!-- received messages and displayed here -->
                        <!-- Received messages are displayed here -->
                        {% for i in messages %}
                        {% if i.sender != user %}
                            <div class="receive">
                                <p style="color: #000;"> {{i.message}}<strong>-{{i.sender}}</strong></p>
                            </div>
                        {% else %}
                            <div class="send">
                                <p style="color: #000;">{{i.message}}</p>
                            </div>
                        {% endif %}
                    {% endfor %}
                            
                    <!-- end receive messages -->
                    </div>

                    <div class="form">
                        <form action="" id="message-form" method="POST">
                            {% csrf_token %}
                            <textarea id="msg" cols="30" name="message" rows="10" placeholder="Enter your message" required></textarea>
                            <button class="submit" type="submit">Send</button> 
                        </form>    
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- <audio id="notification-tone" src="{% static 'sounds/notification.mp3' %}" preload="auto"></audio> -->

</body>


<script>
    // Determine the WebSocket protocol based on the application's URL
    const websocketProtocol = window.location.protocol === "https:" ? "wss" : "ws";
    const wsEndpoint = `${websocketProtocol}://${window.location.host}/ws/notification/{{room_name}}/`;

    // Create a new WebSocket connection
    const socket = new WebSocket(wsEndpoint);

    // Successful connection event
    socket.onopen = (event) => {
        console.log("WebSocket connection opened!");
    };

    // Socket disconnect event
    socket.onclose = (event) => {
        console.log("WebSocket connection closed!");
    };

    // Load the notification sound and handle user interaction for autoplay
    const notificationTone = new Audio("{% static 'sounds/notification.mp3' %}");
    let userInteracted = false;

    // Listen for user interaction to unlock audio playback
    document.addEventListener('click', () => {
        if (!userInteracted) {
            notificationTone.play().then(() => {
                notificationTone.pause();
                notificationTone.currentTime = 0; // Reset playback
                userInteracted = true;
                console.log("Audio unlocked for playback.");
            }).catch((error) => {
                console.error("Audio playback unlock failed:", error);
            });
        }
    });

    // Form submit listener
    document.getElementById('message-form').addEventListener('submit', function(event) {
        event.preventDefault();
        const message = document.getElementById('msg').value;
        socket.send(
            JSON.stringify({
                'message': message,
                'room_name': '{{room_name}}',
                'sender': '{{user}}',
            })
        );
    });

    // Response from consumer on the server
    socket.addEventListener("message", (event) => {
        const messageData = JSON.parse(event.data)['message'];
        console.log(messageData);

        var sender = messageData['sender'];
        var message = messageData['message'];

        // Empty the message input field after the message has been sent
        if (sender == '{{user}}') {
            document.getElementById('msg').value = '';
        }

        // Append the message to the chatbox
        var messageDiv = document.querySelector('.message');

        if (sender != '{{user}}') { // For incoming messages from others
            messageDiv.innerHTML += '<div class="receive"><p style="color: #000;">' + message + '<strong>-' + sender + '</strong></p></div>';
            if (userInteracted) { // Play sound only if user has interacted with the page
                notificationTone.play().catch((error) => {
                    console.error("Audio playback failed:", error);
                });
            }
        } else { // For outgoing messages
            messageDiv.innerHTML += '<div class="send"><p style="color: #000;">' + message + '</p></div>';
        }

        scrollToBottom();
    });

    function scrollToBottomIfNeeded() {
        const chatContainer = document.getElementById("chatContainer");
        if (chatContainer) {
            const isAtBottom = chatContainer.scrollHeight - chatContainer.scrollTop <= chatContainer.clientHeight + 50; // Add small buffer
    
            if (isAtBottom) {
                chatContainer.scrollTop = chatContainer.scrollHeight;
            }
        }
    }
    
</script>




<style>

* {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
    }
    #chatContainer {
        max-height: 400px; /* Set a height for the chat container */
        overflow-y: auto;  /* Enable vertical scrolling */
    }

    .parent {
      background-color: #B1A296;
    }

    nav {
        display: flex;
        justify-content: space-around;
        align-items: center;
        background-color: #659DBD;
        padding: 10px;
    }

    nav ul li {
        list-style: none;
        display: inline-block;
        padding: 10px;
    }

    nav ul li:hover {
        background-color: dodgerblue;
        color: #fff;
        transition: 0.8s;
    }

    nav ul li a {
        text-decoration: none;
        color: #fff;
    }

    .parent {
        height: 100vh;
        display: flex;
        justify-content: center;
        /* background-image: url("/static/img/bck.jpg");  */
       
        background-position: center; 
        background-repeat: no-repeat; 
        background-size: cover; 
        align-items: center;
        width: 100%;
    }

    .child-1 {
        /* height: 70vh; */
        width: 30%;
        margin: 10px;
        border-radius: 10px;
        
        background-color: white;
    }

    .chat-room {
        width: 100%;
        /* max-height: ; */
        border-radius: 10px;
        display: flex;
        align-items: center;
        justify-content: space-around;
        background-color: #fff;
        border: 1px solid dodgerblue;
    }

    .profile-pic {
        /* height: 80px; */
        width: 15%;
        
        border-radius: 50px;
        background-color: #fff;
    }

    .profile-pic img {
        width:100%;
        height:100%;
        border-radius: 50%;
        object-fit: cover;
    }

    .chat-room h3 {
        color: #000;
    }

    .chat-room h3 {
        background-color: gray;
        padding: 10px;
        border-radius: 5px;
        text-decoration: none;
    }

    .chat-room h3 a {
        text-decoration: none;
        color: white;
    }


    .child-2 {
        /* max-height: 100vh; */
        width: 50%;
        margin: 10px;
        border-radius: 10px;
        padding: 10px;
        background-color: #FBEEC1;
    }

    .chat-body-parent {
        display: flex;
        justify-content: center;
        align-items: center;
        /* height: 60vh; */
    }

    .chat-body, .message {
        /* max-height: 100vh; */
        width: 100%;
        background-color: #557A95;
        border-radius: 10px;
        display: flex;      
        padding: 10px;
        flex-direction: column;
    }

    .message {
        max-height: 400px;  /* Or whatever height value you see fit */
        overflow-y: auto;
    }

    .chat-body .message .receive, .send {
        background-color: #B1A296;
        max-width: 400px;
       
        border-radius: 10px;
        padding: 10px;
        margin-bottom: 10px;
    }

    .send:hover {
        padding: 15px;
        transition: 0.8s;
    }

    .receive:hover {
        padding: 15px;
        transition: 0.8s;
    }

    .chat-body .message .send {
        align-self: flex-end;
    }

    .chat-body .message .receive {
        align-self: flex-start;
    }

    form {
        display: flex;
        align-items: center;
        justify-content: space-around;
    }

    form textarea {
        width: 70%;
        height: 40px;
        border-radius: 10px;
        padding: 10px;
    }

    form button {
        width: 25%;
        padding: 10px;
        background-color: #FBEEC1;
        border-radius: 5px;
        border: none;
        color: #000;
    }
    @media only screen and (max-width: 600px) {
    .child-2 {
        width: 100%;
    }
}

</style>
</html> if (sender == '{{user}}') {
    document.getElementById('msg').value = '';
}






















socket.addEventListener("message", (event) => {
    const messageData = JSON.parse(event.data)['message'];
    const chatContainer = document.getElementById("chatContainer");

    const sender = messageData.sender;
    const message = messageData.message;
    const timestamp = new Date(messageData.timestamp);
    const messageDate = timestamp.toLocaleDateString();
    const time = timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

    // Determine the date label (e.g., "Today" or a specific date)
    let dateLabel = messageDate === new Date().toLocaleDateString() ? "Today" : messageDate;

    // Find the container for the date
    let dateSection = document.querySelector(`.date-section[data-date="${dateLabel}"]`);
    if (!dateSection) {
        // Create a new date section if it doesn't exist
        dateSection = document.createElement("div");
        dateSection.className = "date-section";
        dateSection.setAttribute("data-date", dateLabel);

        // Add the date header
        const dateHeader = document.createElement("div");
        dateHeader.className = "date-header";
        dateHeader.innerHTML = `<strong>${dateLabel}</strong>`;
        dateSection.appendChild(dateHeader);

        // Append the new date section to the chat container
        chatContainer.appendChild(dateSection);
    }

    // Create the message bubble
    const messageDiv = document.createElement("div");
    messageDiv.className = sender !== "{{user}}" ? "receive message" : "send message";
    messageDiv.innerHTML = `
        <p>
            ${message}${sender !== "{{user}}" ? `<strong> - ${sender}</strong>` : ""}
            <small>${time}</small>
        </p>
    `;

    // Append the message to the appropriate date section
    dateSection.appendChild(messageDiv);

    // Scroll to the bottom of the chat
    chatContainer.scrollTop = chatContainer.scrollHeight;
});
the right align is working propely



















socket.addEventListener("message", (event) => {
    const messageData = JSON.parse(event.data)['message'];
    console.log(messageData);

    const sender = messageData['sender'];
    const message = messageData['message'];
    const timestamp = new Date(messageData['timestamp']); // Parse timestamp from server
    const messageDate = timestamp.toLocaleDateString(); // Extract date
    const time = timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }); // Extract time

    // Determine today's and yesterday's dates
    const today = new Date().toLocaleDateString();
    const yesterday = new Date(new Date().setDate(new Date().getDate() - 1)).toLocaleDateString();

    let dateLabel = "";
    if (messageDate === today) {
        dateLabel = "Today";
    } else if (messageDate === yesterday) {
        dateLabel = "Yesterday";
    } else {
        dateLabel = messageDate; // e.g., "January 18, 2025"
    }

            // Empty the message input field after the message has been sent
    if (sender == '{{user}}') {
        document.getElementById('msg').value = '';
    }

    // Get the chat container
    const chatContainer = document.getElementById("chatContainer");

    // Find or create the date header
    let existingHeader = document.querySelector(`.date-header[data-date="${dateLabel}"]`);
    if (!existingHeader) {
        // Create a new date header
        const dateHeader = document.createElement('div');
        dateHeader.className = 'date-header';
        dateHeader.setAttribute('data-date', dateLabel);
        dateHeader.innerHTML = `<h4>${dateLabel}</h4>`;
        chatContainer.appendChild(dateHeader);
    }

    // Create the message element
    const messageDiv = document.createElement('div');
    messageDiv.className = sender !== '{{user}}' ? 'receive' : 'send';
    messageDiv.innerHTML = `
    <p style="color: #000;">
        ${message}${sender !== '{{user}}' ? `<strong> - ${sender}</strong>` : ''}
        <small style="display: block; color: #555;">${time}</small>
    </p>
`;


    // Append the message to the chat container
    chatContainer.appendChild(messageDiv);

    // Play notification sound for incoming messages from others
    if (sender !== '{{user}}' && userInteracted) {
        notificationTone.play().catch((error) => {
            console.error("Audio playback failed:", error);
        });
    }

    scrollToBottom();
});





















<style>
    #video-container {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-top: 20px;
        position: relative;
    }
    video {
        width: 300px;
        height: 200px;
        border-radius: 10px;
        background-color: black;
    }
    #end-call-button {
        position: absolute;
        top: 10px;
        right: 10px;
        background-color: red;
        color: white;
        border: none;
        padding: 10px 15px;
        border-radius: 5px;
        cursor: pointer;
    }
    </style>


<div id="video-container" style="display: flex;">
    <video id="localVideo" autoplay muted></video>
    <video id="remoteVideo" autoplay></video>
</div>
<button id="startCallButton">Start Call</button>
<button id="endCallButton">End Call</button>

  
<script>
    const callSignalingServer = new WebSocket(`${protocol}://${window.location.host}/ws/call/{{ room_name }}/`);
    const iceServers = { iceServers: [{ urls: "stun:stun.l.google.com:19302" }] };
    
    let peerConnection;
    let localStream;
    let remoteStream;
    let candidateQueue = [];
    
    // Request media permissions
    async function requestMediaPermissions() {
        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
            alert("Your browser does not support video calls. Please use a modern browser like Chrome or Firefox.");
            return;
        }
    
        try {
            localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
            document.getElementById('localVideo').srcObject = localStream;
            console.log("Media permissions granted.");
        } catch (error) {
            console.error("Permission denied or no media devices available:", error);
            alert("Unable to access camera or microphone. Please check your browser settings.");
        }
    }
    
    // Create the peer connection
    function createPeerConnection() {
        if (peerConnection) return;
    
        peerConnection = new RTCPeerConnection(iceServers);
    
        // Add local stream tracks to the peer connection
        localStream.getTracks().forEach((track) => peerConnection.addTrack(track, localStream));
    
        // Handle remote stream
        peerConnection.ontrack = (event) => {
            if (!remoteStream) {
                remoteStream = new MediaStream();
                document.getElementById('remoteVideo').srcObject = remoteStream;
            }
            remoteStream.addTrack(event.track);
        };
    
        // Handle ICE candidates
        peerConnection.onicecandidate = (event) => {
            if (event.candidate) {
                callSignalingServer.send(JSON.stringify({ candidate: event.candidate }));
            }
        };
    
        // Monitor connection state
        peerConnection.onconnectionstatechange = () => {
            console.log("Connection state changed:", peerConnection.connectionState);
            if (peerConnection.connectionState === "failed") {
                alert("Connection failed. Please try again.");
                endCall();
            }
        };
    }
    
    // Handle incoming signaling messages
    callSignalingServer.onmessage = async (event) => {
        const data = JSON.parse(event.data);
    
        try {
            if (data.offer) {
                console.log("Received offer.");
                createPeerConnection();
    
                if (peerConnection.signalingState === "stable") {
                    await peerConnection.setRemoteDescription(new RTCSessionDescription(data.offer));
                    processQueuedCandidates();
    
                    const answer = await peerConnection.createAnswer();
                    await peerConnection.setLocalDescription(answer);
                    callSignalingServer.send(JSON.stringify({ answer: peerConnection.localDescription }));
                } else {
                    console.warn("Cannot set remote offer. Current signaling state:", peerConnection.signalingState);
                }
            } else if (data.answer) {
                console.log("Received answer.");
                if (peerConnection.signalingState === "have-local-offer") {
                    await peerConnection.setRemoteDescription(new RTCSessionDescription(data.answer));
                    processQueuedCandidates();
                } else {
                    console.warn("Cannot set remote answer. Current signaling state:", peerConnection.signalingState);
                }
            } else if (data.candidate) {
                console.log("Received ICE candidate.");
                if (peerConnection.remoteDescription) {
                    await peerConnection.addIceCandidate(new RTCIceCandidate(data.candidate));
                } else {
                    console.warn("Remote description not set. Queuing ICE candidate.");
                    queueIceCandidate(data.candidate);
                }
            }
        } catch (error) {
            console.error("Error handling signaling message:", error);
        }
    };
    
    // Queue ICE candidates until the remote description is set
    function queueIceCandidate(candidate) {
        candidateQueue.push(candidate);
    }
    
    // Process queued ICE candidates
    async function processQueuedCandidates() {
        while (candidateQueue.length > 0) {
            const candidate = candidateQueue.shift();
            try {
                await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
                console.log("Queued ICE candidate added.");
            } catch (error) {
                console.error("Failed to add queued ICE candidate:", error);
            }
        }
    }
    
    // Start the call
    async function startCall(isReceiver = false) {
        if (!localStream) {
            await requestMediaPermissions();
        }
    
        createPeerConnection();
    
        if (!isReceiver) {
            console.log("Creating and sending offer.");
            const offer = await peerConnection.createOffer();
            await peerConnection.setLocalDescription(offer);
            callSignalingServer.send(JSON.stringify({ offer }));
        }
    }
    
    // End the call
    function endCall() {
        if (peerConnection) {
            peerConnection.close();
            peerConnection = null;
        }
        if (localStream) {
            localStream.getTracks().forEach((track) => track.stop());
            localStream = null;
        }
        if (remoteStream) {
            remoteStream = null;
            document.getElementById('remoteVideo').srcObject = null;
        }
        document.getElementById('video-container').style.display = 'none';
        console.log("Call ended.");
    }
    
    // Initialize media permissions on page load
    document.addEventListener("DOMContentLoaded", async () => {
        await requestMediaPermissions();
    });
    
    // Button handlers
    document.getElementById('startCallButton').addEventListener('click', () => startCall(false));
    document.getElementById('endCallButton').addEventListener('click', endCall);
    </script>  

    'this is my full of the script that are working fine video transfer'


    <script>
        const callSignalingServer = new WebSocket(`${protocol}://${window.location.host}/ws/call/{{ room_name }}/`);
        const iceServers = { iceServers: [{ urls: "stun:stun.l.google.com:19302" }] };
        
        let peerConnection;
        let localStream;
        let remoteStream;
        let candidateQueue = [];
        
        // Request media permissions
        async function requestMediaPermissions() {
            if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                alert("Your browser does not support video calls. Please use a modern browser like Chrome or Firefox.");
                return;
            }
        
            try {
                localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
                document.getElementById('localVideo').srcObject = localStream;
                console.log("Media permissions granted.");
            } catch (error) {
                console.error("Permission denied or no media devices available:", error);
                alert("Unable to access camera or microphone. Please check your browser settings.");
            }
        }
        
        // Create the peer connection
        function createPeerConnection() {
            if (peerConnection) return;
        
            peerConnection = new RTCPeerConnection(iceServers);
        
            // Add local stream tracks to the peer connection
            localStream.getTracks().forEach((track) => peerConnection.addTrack(track, localStream));
        
            // Handle remote stream
            peerConnection.ontrack = (event) => {
                if (!remoteStream) {
                    remoteStream = new MediaStream();
                    document.getElementById('remoteVideo').srcObject = remoteStream;
                }
                remoteStream.addTrack(event.track);
            };
        
            // Handle ICE candidates
            peerConnection.onicecandidate = (event) => {
                if (event.candidate) {
                    callSignalingServer.send(JSON.stringify({ candidate: event.candidate }));
                }
            };
        
            // Monitor connection state
            peerConnection.onconnectionstatechange = () => {
                console.log("Connection state changed:", peerConnection.connectionState);
                if (peerConnection.connectionState === "failed") {
                    alert("Connection failed. Please try again.");
                    endCall();
                }
            };
        }
        
        // Handle incoming signaling messages
        callSignalingServer.onmessage = async (event) => {
            const data = JSON.parse(event.data);
        
            try {
                if (data.offer) {
                    console.log("Received offer.");
                    createPeerConnection();
        
                    if (peerConnection.signalingState === "stable") {
                        await peerConnection.setRemoteDescription(new RTCSessionDescription(data.offer));
                        processQueuedCandidates();
        
                        const answer = await peerConnection.createAnswer();
                        await peerConnection.setLocalDescription(answer);
                        callSignalingServer.send(JSON.stringify({ answer: peerConnection.localDescription }));
                    } else {
                        console.warn("Cannot set remote offer. Current signaling state:", peerConnection.signalingState);
                    }
                } else if (data.answer) {
                    console.log("Received answer.");
                    if (peerConnection.signalingState === "have-local-offer") {
                        await peerConnection.setRemoteDescription(new RTCSessionDescription(data.answer));
                        processQueuedCandidates();
                    } else {
                        console.warn("Cannot set remote answer. Current signaling state:", peerConnection.signalingState);
                    }
                } else if (data.candidate) {
                    console.log("Received ICE candidate.");
                    if (peerConnection.remoteDescription) {
                        await peerConnection.addIceCandidate(new RTCIceCandidate(data.candidate));
                    } else {
                        console.warn("Remote description not set. Queuing ICE candidate.");
                        queueIceCandidate(data.candidate);
                    }
                }
            } catch (error) {
                console.error("Error handling signaling message:", error);
            }
        };
        
        // Queue ICE candidates until the remote description is set
        function queueIceCandidate(candidate) {
            candidateQueue.push(candidate);
        }
        
        // Process queued ICE candidates
        async function processQueuedCandidates() {
            while (candidateQueue.length > 0) {
                const candidate = candidateQueue.shift();
                try {
                    await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
                    console.log("Queued ICE candidate added.");
                } catch (error) {
                    console.error("Failed to add queued ICE candidate:", error);
                }
            }
        }
        
        // Start the call
        async function startCall(isReceiver = false) {
            if (!localStream) {
                await requestMediaPermissions();
            }
        
            createPeerConnection();
        
            if (!isReceiver) {
                console.log("Creating and sending offer.");
                const offer = await peerConnection.createOffer();
                await peerConnection.setLocalDescription(offer);
                callSignalingServer.send(JSON.stringify({ offer }));
            }
            document.getElementById('video-container').style.display = 'block';
        }
        
        // End the call
        function endCall() {
            if (peerConnection) {
                peerConnection.close();
                peerConnection = null;
            }
            if (localStream) {
                localStream.getTracks().forEach((track) => track.stop());
                localStream = null;
            }
            if (remoteStream) {
                remoteStream = null;
                document.getElementById('remoteVideo').srcObject = null;
            }
            document.getElementById('video-container').style.display = 'none';
            console.log("Call ended.");
        }
        
        // Initialize media permissions on page load
         document.addEventListener("DOMContentLoaded", async () => {
            await requestMediaPermissions();
        }); 
        
        // Button handlers
        document.getElementById('startCallButton').addEventListener('click', () => startCall(false));
        document.getElementById('endCallButton').addEventListener('click', endCall);
        </script> 
















        //message.html
        <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <title>Messages</title>
    <!-- load static -->
    {% load static %}
    <!-- <link rel="stylesheet" href="{% static 'style.css' %}"> -->
    <!-- link to h=css file -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js" integrity="sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
</head>
<body>
    <div class="parent">
        <div class="child-2">
            <center><h2>{{room_name }} Chats</h2></center><hr>
            <div class="chat-body-parent">
                <div class="chat-body" id="tasks">
                    <div class="message" id="chatContainer">
                        <div class="chat-container">
                            {% for date, messages in grouped_messages.items %}
                                <!-- Loop through messages for the specific date -->
                                {% for message in messages %}
                                    {% if forloop.first %}
                                        <!-- Display the date as a header after the first message -->
                                        <div class="date-header">
                                            <strong>{{ date }}</strong>
                                        </div>
                                    {% endif %}
                        
                                    {% if message.sender != user %}
                                        <!-- Message from other users (received) -->
                                        <div class="receive message">
                                            <p>
                                                {{ message.message }}
                                                <strong>- {{ message.sender }}</strong>
                                                <small>{{ message.timestamp|date:"h:i A" }}</small>
                                            </p>
                                        </div>
                                    {% else %}
                                        <!-- Message from the logged-in user (sent) -->
                                        <div class="send message">
                                            <p>
                                                {{ message.message }}
                                                <small>{{ message.timestamp|date:"h:i A" }}</small>
                                            </p>
                                        </div>
                                    {% endif %}
                                {% endfor %}
                            {% endfor %}
                        </div>
                        
                    </div>
                    
                    </div>
                    </div>
                    

                    <div class="form">
                        <form action="" id="message-form" method="POST">
                            {% csrf_token %}
                            <textarea id="msg" cols="30" name="message" rows="10" placeholder="Enter your message" required></textarea>
                            <button class="submit" type="submit">Send</button> 
                        </form>    
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- <audio id="notification-tone" src="{% static 'sounds/notification.mp3' %}" preload="auto"></audio> -->

</body>

<script>
    if (Notification.permission === "default") {
        Notification.requestPermission().then((permission) => {
            if (permission === "granted") {
                console.log("Notification permission granted.");
            } else {
                console.warn("Notification permission denied.");
            }
        });
    }
    // Determine the WebSocket protocol based on the application's URL
    const websocketProtocol = window.location.protocol === "https:" ? "wss" : "ws";
    const wsEndpoint = `${websocketProtocol}://${window.location.host}/ws/notification/{{room_name}}/`;

    // Create a new WebSocket connection
    const socket = new WebSocket(wsEndpoint);

    // Successful connection event
    socket.onopen = (event) => {
        console.log("WebSocket connection opened!");
    };

    // Socket disconnect event
    socket.onclose = (event) => {
        console.log("WebSocket connection closed!");
    };

    // Load the notification sound and handle user interaction for autoplay
    const notificationTone = new Audio("{% static 'sounds/notification.mp3' %}");
    let userInteracted = false;

    // Listen for user interaction to unlock audio playback
    document.addEventListener('click', () => {
        if (!userInteracted) {
            notificationTone.play().then(() => {
                notificationTone.pause();
                notificationTone.currentTime = 0; // Reset playback
                userInteracted = true;
                console.log("Audio unlocked for playback.");
            }).catch((error) => {
                console.error("Audio playback unlock failed:", error);
            });
        }
    });

    // Form submit listener
    document.getElementById('message-form').addEventListener('submit', function(event) {
        event.preventDefault();
        const message = document.getElementById('msg').value;
        socket.send(
            JSON.stringify({
                'message': message,
                'room_name': '{{room_name}}',
                'sender': '{{user}}',
            })
        );
    });

    // Response from consumer on the server
  
    socket.addEventListener("message", (event) => {
        const messageData = JSON.parse(event.data)['message'];
        const chatContainer = document.getElementById("chatContainer");
    
        const sender = messageData.sender;
        const message = messageData.message;
        const timestamp = new Date(messageData.timestamp);
        const messageDate = timestamp.toLocaleDateString();
        const time = timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

        if (sender == '{{user}}') {
            document.getElementById('msg').value = '';
        }
    


    
        // Determine the date label (e.g., "Today" or a specific date)
        let dateLabel = messageDate === new Date().toLocaleDateString() ? "New Messages" : messageDate;
    
        // Find the container for the date
        let dateSection = document.querySelector(`.date-section[data-date="${dateLabel}"]`);
        if (!dateSection) {
            // Create a new date section if it doesn't exist
            dateSection = document.createElement("div");
            dateSection.className = "date-section";
            dateSection.setAttribute("data-date", dateLabel);
    
            // Add the date header
            const dateHeader = document.createElement("div");
            dateHeader.className = "date-header";
            dateHeader.innerHTML = `<strong>${dateLabel}</strong>`;
            dateSection.appendChild(dateHeader);
    
            // Append the new date section to the chat container
            chatContainer.appendChild(dateSection);
        }
    
        // Create the message bubble
        const messageDiv = document.createElement("div");
        messageDiv.className = sender !== "{{user}}" ? "receive message" : "send message";
        messageDiv.innerHTML = `
            <p>
                ${message}${sender !== "{{user}}" ? `<strong> - ${sender}</strong>` : ""}
                <small>${time}</small>
            </p>
        `;
    
        // Append the message to the appropriate date section
        dateSection.appendChild(messageDiv);
    
        // Scroll to the bottom of the chat
        chatContainer.scrollTop = chatContainer.scrollHeight;
    });
        // Function to scroll to the bottom of the chat
        
        function scrollToBottom() {
            const chatContainer = document.getElementById("chatContainer");
            if (chatContainer) {
                chatContainer.scrollTop = chatContainer.scrollHeight;
            }
        }
        document.addEventListener('DOMContentLoaded', () => {
            scrollToBottom(); // Scroll to the bottom of the chat container when the page loads
        });
                


</script>





<style>
 /* Reset */
/* Global Reset */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* Parent Container */
.parent {
    height: 100vh;
    background-color: #ece5dd;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
}

/* Chat Box Container */
.child-2 {
    width: 60%;
    height: 90%;
    background-color: #ffffff;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    display: flex;
    flex-direction: column;
    overflow: hidden;
}

/* Header */
.child-2 h2 {
    background-color: #075e54;
    color: white;
    margin: 0;
    padding: 15px;
    text-align: center;
    font-size: 20px;
    font-weight: bold;
}

/* Chat Body Parent */
.chat-body-parent {
    flex: 1;
    display: flex;
    justify-content: center;
    align-items: center;
    overflow: hidden;
    background-color: #f0f0f0;
}

/* Chat Body */
.chat-body {
    width: 100%;
    height: 100%;
    overflow-y: auto;
    padding: 20px;
    display: flex;
    flex-direction: column;
    gap: 10px;
    background-color: #e5ddd5;
}
.chat-container{
    display: flex;
    flex-direction: column;
}
/* Date Header */
.date-header {
    text-align: center;
    margin: 10px 0;
    font-size: 14px;
    color: #666;
    font-weight: bold;
    background-color: #d7ccc8;
    padding: 5px 10px;
    border-radius: 20px;
    display: inline-block;
    align-self: center;
    width: 100%;
}

/* Message Bubbles */
.receive, .send {
    padding: 10px 15px;
    border-radius: 15px;
    max-width: 70%;
    word-wrap: break-word;
    font-size: 14px;
    line-height: 1.5;
    position: relative;
}

/* Received Messages */
.receive {
    background-color: #ffffff; /* White background for received messages */
    align-self: flex-start;    /* Align to the left */
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    border-radius: 15px;       /* Rounded corners */
    padding: 10px 15px;
    max-width: max-content;            /* Prevent message from stretching too far */
    word-wrap: break-word;     /* Break long messages */
    margin: 5px 0;             /* Space between messages */
    position: relative;
}

/* Sent Messages */
.send {
    background-color: #dcf8c6; /* Light green background for sent messages */
    align-self: flex-end;      /* Align to the right */
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    border-radius: 15px;       /* Rounded corners */
    padding: 10px 15px;
    max-width: max-content;            /* Prevent message from stretching too far */
    word-wrap: break-word;     /* Break long messages */
    margin: 5px 0;             /* Space between messages */
    position: relative;
}

/* Timestamps for Received Messages */
.receive::after {
    content: attr(data-time);  /* Use the 'data-time' attribute for the timestamp */
    position: absolute;
    font-size: 11px;
    color: #999;
    bottom: -15px;             /* Position below the message */
    left: 10px;                /* Align to the left of the message */
}

/* Timestamps for Sent Messages */
.send::after {
    content: attr(data-time);  /* Use the 'data-time' attribute for the timestamp */
    position: absolute;
    font-size: 11px;
    color: #999;
    bottom: -15px;             /* Position below the message */
    right: 10px;               /* Align to the right of the message */
}

/* Timestamp Styling */
.message p {
    margin: 0;
    padding-bottom: 5px;
    color: #000;
}

.message small {
    font-size: 11px;
    color: #888;
    display: block;
    text-align: right;
}

/* Input Form */
.form {
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 10px;
    background-color: #f5f5f5;
    border-top: 1px solid #ddd;
}


#message-form{
    display: flex;
    align-items: center;
    justify-content: center;
}

form textarea {
    flex: 1;
    padding: 10px;
    font-size: 14px;
    border-radius: 20px;
    border: 1px solid #ddd;
    resize: none;
    margin-right: 10px;
    outline: none;
    height: 40px;
}

form button {
    background-color: #075e54;
    color: white;
    border: none;
    border-radius: 20px;
    padding: 10px 20px;
    cursor: pointer;
    font-size: 14px;
    outline: none;
    transition: background-color 0.3s ease;
}

form button:hover {
    background-color: #128c7e;
}

/* Scrollable Chat Area */
.chat-body {
    scroll-behavior: smooth;
}

.message {
    overflow-y: auto;
    scrollbar-width: thin;
    scrollbar-color: #c1c1c1 #e5ddd5;
}

.message::-webkit-scrollbar {
    width: 5px;
}

.message::-webkit-scrollbar-thumb {
    background-color: #c1c1c1;
    border-radius: 5px;
}

.message::-webkit-scrollbar-track {
    background-color: #e5ddd5;
}

/* Mobile Responsiveness */
@media (max-width: 768px) {
    .child-2 {
        width: 90%;
        height: 95%;
    }
}
/* Date Section */
.date-section {
    display: flex;
    flex-direction: column;
    gap: 10px;
}

/* Date Header */
.date-header {
    text-align: center;
    margin: 10px 0;
    font-size: 14px;
    color: #666;
    font-weight: bold;
    background-color: #d7ccc8;
    padding: 5px 10px;
    border-radius: 20px;
}







</style>
</html>